# FastOrder Electron 项目规则文件

## 项目概览
这是一个基于 Electron + Vite + React + TypeScript 的桌面应用程序，主要功能是自动化商品购买系统。

## 技术栈
- **前端框架**: React 18 + TypeScript + Vite
- **桌面框架**: Electron 33
- **UI库**: Ant Design 5
- **样式**: Tailwind CSS + PostCSS
- **自动化**: Puppeteer Core
- **数据处理**: node-xlsx, SQLite3
- **路由**: React Router DOM 7
- **HTTP客户端**: Axios
- **测试**: Vitest + Playwright

## 项目结构
```
fastOrderElectron/
├── electron/                    # Electron 主进程和预加载脚本
│   ├── main/                   # 主进程代码
│   └── preload/                # 预加载脚本
├── src/                        # React 渲染进程源码
│   ├── assets/                 # 静态资源和脚本
│   ├── components/             # React 组件
│   ├── dal/                    # 数据访问层
│   ├── ddl/                    # 数据定义层
│   ├── demos/                  # 演示代码
│   ├── type/                   # TypeScript 类型定义
│   ├── utils/                  # 工具函数
│   └── views/                  # 页面组件
├── static/                     # 静态文件 (如数据库)
├── build/                      # 构建图标资源
├── dist-electron/              # Electron 构建输出
├── release/                    # 生产构建发布文件
└── test/                      # 测试文件
```

## 编码规范

### TypeScript 规范
- 严格使用 TypeScript，禁用 `any` 类型
- 所有组件必须有明确的类型定义
- 使用接口 `interface` 定义对象结构
- 导入路径使用 `@/` 别名指向 `src/` 目录

### React 规范
- 使用函数组件和 React Hooks
- 组件名称使用 PascalCase
- 自定义 Hook 以 `use` 开头
- 使用 React.memo 优化性能敏感组件
- 状态管理优先使用 useState 和 useContext

### 文件命名规范
- 组件文件: `ComponentName.tsx`
- 工具函数: `utilityName.ts`
- 类型定义: `TypeName.ts` 或 `types.ts`
- 常量文件: `constants.ts`
- Hook 文件: `useHookName.ts`

### Electron 规范
- 主进程代码放在 `electron/main/`
- 预加载脚本放在 `electron/preload/`
- 使用 contextIsolation 确保安全性
- 通过 IPC 通信进行进程间数据交换

### 自动化脚本规范 (Puppeteer)
- 所有自动化脚本放在 `src/assets/` 目录
- 使用 async/await 处理异步操作
- 添加适当的延迟避免检测
- 错误处理和日志记录必须完整
- 选择器使用稳定的属性 (data-* 属性优先)

## 开发指南

### 依赖管理
- 生产依赖: 运行时需要的包
- 开发依赖: 仅开发和构建时需要的包
- Electron 相关依赖必须在 dependencies 中

### 构建配置
- 开发模式: `npm run dev`
- 生产构建: `npm run build`
- 测试: `npm run test`
- 调试配置已在 `.vscode/` 目录配置完成

### 安全考虑
- 禁止在渲染进程直接使用 Node.js API
- 通过预加载脚本暴露安全的 API
- 使用 contextIsolation 隔离上下文
- 输入验证和输出转义

## 数据处理规范

### Excel 文件处理
- 使用 node-xlsx 处理 Excel 文件
- 文件路径统一使用相对路径
- 数据映射使用 Map 或对象字面量
- 错误数据需要记录和处理

### 数据库操作 (SQLite)
- 数据库文件位于 `static/` 目录
- 使用参数化查询防止注入
- 事务处理确保数据一致性
- 连接池管理避免资源泄露

### API 调用规范
- 使用 Axios 进行 HTTP 请求
- 配置请求超时和重试机制
- 错误处理和状态码检查
- 请求日志记录便于调试

## 性能优化

### 前端优化
- 使用 React.lazy 进行代码分割
- 图片资源优化和懒加载
- 虚拟滚动处理大数据列表
- Memo 缓存昂贵计算结果

### Electron 优化
- 预加载脚本最小化
- 主进程避免阻塞操作
- 渲染进程内存管理
- 进程间通信优化

## 错误处理

### 全局错误处理
- 渲染进程使用 ErrorBoundary
- 主进程使用 try-catch 和 process.on
- 未捕获异常日志记录
- 用户友好的错误提示

### 自动化脚本错误处理
- 网络超时处理
- 元素未找到重试机制
- 页面加载失败恢复
- 异常状态记录和报告

## 调试和测试

### 调试配置
- VS Code 调试配置已就绪
- Chrome DevTools 集成
- 断点调试支持
- 热重载开发模式

### 测试策略
- 单元测试使用 Vitest
- E2E 测试使用 Playwright
- 组件测试使用 React Testing Library
- 自动化脚本模拟测试

## 版本控制
- 主分支: `main`
- 功能分支: `feature/feature-name`
- 修复分支: `fix/issue-description`
- 提交信息遵循 Conventional Commits

## 部署发布
- 使用 electron-builder 打包
- 支持 Windows/macOS/Linux
- 自动更新使用 electron-updater
- 版本号遵循语义化版本

## 注意事项
1. Puppeteer 脚本需要配置正确的 Chrome 路径
2. 自动化操作添加随机延迟避免检测
3. Excel 文件路径确保在打包后可访问
4. 数据库操作注意文件锁定问题
5. 跨平台兼容性测试
6. 安全审计和代码扫描

## 常用命令
```bash
# 安装依赖
npm install

# 开发模式
npm run dev

# 构建应用
npm run build

# 运行测试
npm run test

# 预览构建
npm run preview
```

## 相关文档
- [Electron 官方文档](https://www.electronjs.org/docs)
- [Vite 配置指南](https://vitejs.dev/config/)
- [React 官方文档](https://react.dev)
- [Puppeteer API](https://pptr.dev)
- [Ant Design 组件库](https://ant.design)